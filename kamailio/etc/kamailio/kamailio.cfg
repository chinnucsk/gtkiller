log_stderror=no
fork=yes
debug=2

log_facility=log_local0

check_via=no
dns=no
rev_dns=no
children=8

listen=tls:188.227.5.66:5061
listen=tcp:188.227.5.66:5060
listen=udp:188.227.5.66:5060

alias="188.227.5.66"
alias="madrid.unisonproject.com"


mpath="/usr/lib/kamailio/modules/:/usr/lib/kamailio/modules_k/"
loadmodule "tm.so"
loadmodule "pv.so"
loadmodule "sl.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "db_mysql.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "nathelper.so"
loadmodule "xlog.so"
loadmodule "kex.so"
loadmodule "siputils.so"
loadmodule "tls.so"


modparam("rr", "enable_full_lr", 1)
modparam("registrar", "default_expires", 60)
modparam("registrar", "min_expires", 50)
modparam("registrar", "max_expires", 120)
modparam("registrar", "received_param", "received")

modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url", "mysql://gtkiller:replace_with_a_correct_passowrd@localhost/kamailio")
modparam("auth_db", "load_credentials", "")

# disable rtpproxy
modparam("nathelper", "rtpproxy_sock", "")
modparam("nathelper", "natping_interval", 30)
modparam("nathelper|registrar", "received_avp", "$avp(i:80)")
modparam("nathelper", "sipping_bflag", 8)
modparam("nathelper", "sipping_from", "sip:pinger@madrid.unisonproject.com")

enable_tls=1
tcp_async=no
modparam("tls", "tls_disable_compression", 1)
modparam("tls", "tls_method", "SSLv23")
modparam("tls", "private_key", "/etc/kamailio/gtkiller_kam.key")
modparam("tls", "certificate", "/etc/kamailio/gtkiller_kam.crt")

route
{
    xlog("L_INFO", "$ci: $rm received with contact $ct");

    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }
    if (msg:len >= 2048) {
        sl_send_reply("513", "Message too big");
        exit;
    }


    if (method == "SUBSCRIBE") {
        xlog("L_INFO", "$ci: rejecting with 501");
        sl_send_reply("501", "Not Implemented");
        exit;
    }

    route(NAT);

    if (has_totag()) {
        # Request within a dialog.
        xlog("L_INFO", "$ci: received $rm within a dialog");
        route(RELAY);
        exit;
    }

    # Initial request.
    if (method == "REGISTER") {
        route(REGISTER);
        exit;
    }

    # Remove preloaded route headers.
    remove_hf("Route");
    # Record routing for all requests.
    record_route();
    route(RELAY);
    exit;
}

route[NAT]
{
    force_rport();
    if (nat_uac_test("19")) {
        if (method=="REGISTER") {
            fix_nated_register();
        } else {
            route(ADD_CONTACT_ALIAS);
        }
    }
    return;
}

route[REGISTER]
{
    if (!www_authorize("", "subscriber")) {
        # In the case the reply cannot be sent, www_challenge() returns "-1".
        # In the case a reply was sent, www_challenge() terminates further script processing.
        www_challenge("", "0");
        xlog("L_ERR", "$ci: www_challenge() could not send a reply");
        exit;
    }
    if ($au != $tU) {
        xlog("L_ERR", "$ci: auth username is not the same as the To username");
        sl_send_reply("403","forbidden auth ID");
        exit;
    }
    xlog("L_INFO", "$ci: REGISTER accepted");
    if (!save("location")) {
        xlog("L_ERR", "$ci: failed saving location, contact $ct");
        sl_reply_error();
    }
}

route[ADD_CONTACT_ALIAS]
{ 
    if (!add_contact_alias()) { 
        xlog("L_ERR", "$ci: failed aliasing contact $ct");
        send_reply("400", "Bad request"); 
        exit; 
    } 
}

route[RELAY]
{
    if (src_ip == myself and src_port == 5070) {
        route(FROM_B2BUA);
    } else {
        route(TO_B2BUA);
    }
}

route[TO_B2BUA]
{
    xlog("L_INFO", "$ci: relaying $rm to b2bua");

    t_on_reply("REPLY_FROM_B2BUA");
    route(ADD_CONTACT_ALIAS);
    
    rewritehostport("188.227.5.66:5070");

    if (!t_relay_to_udp("188.227.5.66", "5070")) {
        xlog("L_ERR", "$ci: failed relaying $rm to b2bua");
        sl_reply_error();
    }
}

route[FROM_B2BUA]
{
    xlog("L_INFO", "$ci: relaying $rm from b2bua to $ru");

    t_on_reply("REPLY_FROM_PHONE");

    handle_ruri_alias();
    switch ($rc) {
    case -1:
        xlog("L_ERR", "$ci: failed to handle the alias of R-URI $ru");
        send_reply("400", "Bad request");
        exit;
    case 1:
        xlog("L_INFO", "$ci: relaying in-dialog $rm from $fu to $du");
        break;
    case 2:
        if (loose_route()) {
            xlog("L_INFO", "$ci: loose routing $rm to $ru");
            append_hf("P-hint: rr-enforced\r");
        }
        else {
            xlog("L_INFO", "$ci: looking up for a contact");
            if (!lookup("location")) {
                xlog("L_INFO", "$ci: not found");
                sl_send_reply("404", "Not Found");
                exit;
            }
        }
        break;
    };
    if (!t_relay()) {
        xlog("L_ERR", "$ci: failed relaying $rm from b2bua");
        sl_reply_error();
    }
}

onreply_route[REPLY_FROM_B2BUA]
{
    xlog("L_INFO", "$ci: received reply from b2bua with status $rs, relaying to the phone");
}

onreply_route[REPLY_FROM_PHONE]
{
    xlog("L_INFO", "$ci: received reply from the phone with status $rs, relaying to b2bua");
    if (!(status=~"183" || status=~"200"))
        exit;

    if (!add_contact_alias()) {
        xlog("L_ERR", "$ci: failed aliasing contact $ct");
        exit;
    }
}

